class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        res = []

        def backtrack(start):
            if start == len(nums):   # base case
                res.append(nums[:])  # store a copy
                return

            for i in range(start, len(nums)):
                nums[start], nums[i] = nums[i], nums[start]  # swap
                backtrack(start + 1)                        # recurse
                nums[start], nums[i] = nums[i], nums[start]  # backtrack

        backtrack(0)   # ğŸ‘ˆ start recursion at index 0
        return res
